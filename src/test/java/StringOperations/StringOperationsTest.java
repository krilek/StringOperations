/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StringOperations;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class StringOperationsTest {
    private StringOperations stringOperations;


    @BeforeEach
    void setUp() {
        stringOperations = new StringOperations();

    }

    @AfterEach
    void tearDown() {
        stringOperations = null;
    }



    @Test
    void concatEmptyEmpty(){
        String inputA = "";
        String inputB = "";
        assertEquals("" ,stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatFullEmpty(){
        String inputA = "Full";
        String inputB = "";
        assertEquals("Full" ,stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatEmptyFull(){
        String inputA = "";
        String inputB = "Full";
        assertEquals("Full" ,stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatNullFull(){
        String inputA = null;
        String inputB = "Full";
        assertNull(stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatFullNull(){
        String inputA = "Full";
        String inputB = null;
        assertNull(stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatNullNull(){
        String inputA = null;
        String inputB = null;
        assertNull(stringOperations.concat(inputA,inputB));
    }

    @ParameterizedTest
    @CsvSource({"a,b,ab", "b,a,ba"})
    void concatLetters(String inputA, String inputB, String expected){
        assertEquals(expected ,stringOperations.concat(inputA,inputB));
    }

    @Test
    void concatUnicode(){
        String inputA = "\u20A9";
        String inputB = "\u20A9";
        assertEquals("\u20A9\u20A9" ,stringOperations.concat(inputA,inputB));
    }
    @Test
    void reverseCorrectReverse(){
        String input = "abcd";
        assertEquals("dcba" ,stringOperations.reverse(input));
    }

    @Test
    void reverseLastLetterDuplicated(){
        String input = "abcd";
        assertNotEquals("dcbb" ,stringOperations.reverse(input));
    }

    @Test
    void reverseEmptyString(){
        String input = "";
        assertEquals("" ,stringOperations.reverse(input));
    }

    @ParameterizedTest
    @ValueSource(strings = { "do gees e seeg od", "devil lived", "rac efas t safe car" })
    void reversePalindromeShouldBePalindrome(String input){
        assertEquals(input ,stringOperations.reverse(input));
    }

    @Test
    void reverseNullStringTest() {
        assertThrows(NullPointerException.class,() -> stringOperations.reverse(null));
    }

    @Test
    void reverseUnicodeTest() {
        String input = "\u20A9 my g ym \u20A9";
        assertEquals(input ,stringOperations.reverse(input));
    }

    @Test
    void reverseEscapedNewLineTest() {
        String input = "aabb\n";
        String expected = "\nbbaa";
        assertEquals(expected,stringOperations.reverse(input));
    }

    @Test
    void reverseEscapedTabTest() {
        String input = "aabb\t";
        String expected = "\tbbaa";
        assertEquals(expected,stringOperations.reverse(input));
    }
    @Test
    void palindromeNullStringTest() {
        assertThrows(NullPointerException.class,() -> stringOperations.isPalindrome(null));
    }

    @Test
    void palindromeEmptyStringTest() {
        String input = "";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeMultipleWhiteSpaceTest() {
        String input = "A   Santa         at Nasa";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeSingleCharTest() {
        String input = "A";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeExtraPunctuationTest() {
        String input = "Bon sport, trop snob?";
        assertFalse(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeUnicodeTest() {
        String input = "\u20A9 My gym \u20A9";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeAlphaNumericPalindromeTest() {
        String input = "Air 2 an a2ria";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeValidPalindromeTest() {
        String input = "No l em  on n o mel on ";
        assertTrue(stringOperations.isPalindrome(input));
    }

    @Test
    void palindromeInvalidPalindromeTest() {
        String input = "Invalid test string";
        assertFalse(stringOperations.isPalindrome(input));
    }
}
